# Generated by Django 3.1.3 on 2020-11-03 16:35

from typing import List, Optional, Tuple
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("comicsdb", "0001_new_squash"),
    ]

    def split_creator_names(apps, schema_editor):
        def check_for_de_la(name_split: List[str], name_count: int) -> bool:
            return (
                name_split[name_count - 3].lower() == "de"
                and name_split[name_count - 2].lower() == "la"
            )

        def check_for_familial_suffix(name_split: List[str], name_count: int) -> bool:
            FAMILIAL_SUFFIX = ["jr.", "jr", "sr.", "sr", "iv", "iii", "ii"]
            return name_split[name_count - 1].lower() in FAMILIAL_SUFFIX

        def check_for_extra_surname(name_split: List[str], name_count: int) -> bool:
            EXTRA_SURNAME = ["st.", "di", "del", "de", "dos", "van", "von", "san"]
            return name_split[name_count - 2].lower() in EXTRA_SURNAME

        def has_one_name(
            name_split: List[str], name_count: int
        ) -> Tuple[str, Optional[str]]:
            first_name = name_split[name_count - 1]
            last_name = None
            return first_name, last_name

        def has_two_names(
            name_split: List[str], name_count: int
        ) -> Tuple[str, Optional[str]]:
            first_name = name_split[name_count - 2]
            last_name = name_split[name_count - 1]
            return first_name, last_name

        def has_del_la_name(
            name_split: List[str], name_count: int
        ) -> Tuple[str, Optional[str]]:
            first_name = (
                name_split[0]
                if name_count < 5
                else " ".join(name_split[0 : name_count - 4])
            )
            last_name = f"{name_split[name_count-3]} {name_split[name_count - 2]} {name_split[name_count - 1]}"
            return first_name, last_name

        def has_familial_name(
            name_split: List[str], name_count: int
        ) -> Tuple[str, Optional[str]]:
            first_name = (
                name_split[0]
                if name_count < 4
                else " ".join(name_split[0 : name_count - 3])
            )
            last_name = f"{name_split[name_count - 2]} {name_split[name_count - 1]}"
            return first_name, last_name

        def has_extra_surname(
            name_split: List[str], name_count: int
        ) -> Tuple[str, Optional[str]]:
            first_name = (
                name_split[0]
                if name_count < 4
                else " ".join(name_split[0 : name_count - 3])
            )
            last_name = f"{name_split[name_count - 2]} {name_split[name_count - 1]}"
            return first_name, last_name

        def has_middle_name(
            name_split: List[str], name_count: int
        ) -> Tuple[str, Optional[str]]:
            last_name = name_split[name_count - 1]
            first_name = (
                name_split[0]
                if name_count < 3
                else " ".join(name_split[0 : name_count - 1])
            )
            return first_name, last_name

        Creator = apps.get_model("comicsdb", "Creator")
        creators = Creator.objects.all()

        for creator in creators:
            name_split: List[str] = creator.name.split()
            name_count: int = len(name_split)

            if name_count < 2:
                first_name, last_name = has_one_name(name_split, name_count)
            elif name_count < 3:
                first_name, last_name = has_two_names(name_split, name_count)
            elif check_for_de_la(name_split, name_count):
                first_name, last_name = has_del_la_name(name_split, name_count)
            elif check_for_familial_suffix(name_split, name_count):
                first_name, last_name = has_familial_name(name_split, name_count)
            elif check_for_extra_surname(name_split, name_count):
                first_name, last_name = has_extra_surname(name_split, name_count)
            else:
                first_name, last_name = has_middle_name(name_split, name_count)

            creator.first_name = first_name
            if last_name is not None:
                creator.last_name = last_name
            creator.save()

    operations = [
        migrations.AlterModelOptions(
            name="creator", options={"ordering": ["last_name", "first_name"]},
        ),
        migrations.AddField(
            model_name="creator",
            name="first_name",
            field=models.CharField(blank=True, max_length=150),
        ),
        migrations.AddField(
            model_name="creator",
            name="last_name",
            field=models.CharField(blank=True, max_length=150),
        ),
        # run function for transferring data
        migrations.RunPython(split_creator_names),
    ]
